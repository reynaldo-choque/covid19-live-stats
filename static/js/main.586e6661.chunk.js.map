{"version":3,"sources":["store/selectors/covidStatsSelector.js","store/actions/liveStatsAction.js","components/Modal/Modal.js","components/Modal/index.js","components/Displayer/Displayer.js","components/Displayer/index.js","components/Displayer/DisplayerContainer.js","App.js","store/reducers/liveStats.js","store/reducers/index.js","index.js"],"names":["getCountriesSelector","createSelector","state","liveStats","covidData","countries","setCovidData","data","type","payload","getCovidData","dispatch","getState","a","request","axios","get","console","log","ns","Modal","closeModalFn","getCountryFn","currentCountry","lastUpdate","Date","updated","className","onClick","country","active","activePerOneMillion","cases","casesPerOneMillion","critical","criticalPerOneMillion","deaths","deathsPerOneMillion","oneCasePerPeople","population","recovered","recoveredPerOneMillion","tests","testsPerOneMillion","todayCases","todayDeaths","todayRecovered","getDate","getMonth","getFullYear","getHours","getMinutes","Displayer","displayModal","setModal","newState","setState","setCurentCountry","newCountry","getCurrentCountry","this","props","intervalApi","window","setInterval","clearInterval","map","src","countryInfo","flag","React","DisplayerContainer","compose","connect","bindActionCreators","App","Component","liveStatsReducer","action","rootReducer","combineReducers","store","createStore","applyMiddleware","thunk","devToolsExtension","f","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.586e6661.chunk.js","sourcesContent":["import {createSelector} from \"reselect\";\r\n\r\nconst covidSelector = (state) => state.liveStats;\r\n\r\nexport const getCountriesSelector = createSelector(\r\n    [covidSelector],\r\n    (covidData) => covidData.countries\r\n);","//https://covid2019-api.herokuapp.com/\r\n//https://documenter.getpostman.com/view/11144369/Szf6Z9B3?version=latest\r\nimport axios from \"axios\";\r\n\r\nexport const setCovidData = (data) => {\r\n    return {\r\n        type: \"SET_COVID_STATS_DATA\",\r\n        payload: {\r\n            countries: data\r\n        }\r\n    };\r\n};\r\n\r\nexport const getCovidData = () => async (dispatch, getState) => {\r\n    const request = axios.get(\"https://corona.lmao.ninja/v2/countries?yesterday&sort\");\r\n    try {\r\n        const {data} = await request;\r\n        //const {data: {Countries, Global, Date}} = await request;\r\n        dispatch(setCovidData(data));\r\n    } catch (e) {\r\n        console.log(\"error\", e);\r\n    }\r\n}","import * as React from \"react\";\r\nimport './Modal.scss';\r\n\r\nconst ns = 'my-modal';\r\nconst Modal = ({closeModalFn, getCountryFn}) => {\r\n    console.log(\"current\", getCountryFn());\r\n    const currentCountry = getCountryFn();\r\n    const lastUpdate = new Date(currentCountry.updated);\r\n    return (\r\n        <div className={`${ns}`}>\r\n            <div className={`${ns}__content`}>\r\n                <div className={`${ns}__content--close-button`}>\r\n                    <span onClick={() => {\r\n                        closeModalFn();\r\n                    }}>\r\n                        X\r\n                    </span>\r\n                </div>\r\n                <div className={`${ns}__content--title`}>{currentCountry.country}</div>\r\n                <div className={`${ns}__content--data`}>\r\n                    <span><b>Active: </b>{currentCountry.active}</span>\r\n                    <span><b>Active per one million: </b>{currentCountry.activePerOneMillion}</span>\r\n                    <span><b>Cases: </b>{currentCountry.cases}</span>\r\n                    <span><b>Cases per One Million: </b>{currentCountry.casesPerOneMillion}</span>\r\n                    <span><b>Critical: </b>{currentCountry.critical}</span>\r\n                    <span><b>Critical per One Million: </b>{currentCountry.criticalPerOneMillion}</span>\r\n                    <span><b>Deaths: </b>{currentCountry.deaths}</span>\r\n                    <span><b>DeathsPerOneMillion: </b>{currentCountry.deathsPerOneMillion}</span>\r\n                    <span><b>One case per people: </b>{currentCountry.oneCasePerPeople}</span>\r\n                    <span><b>Population: </b>{currentCountry.population}</span>\r\n                    <span><b>Recovered: </b>{currentCountry.recovered}</span>\r\n                    <span><b>Recovered per One Million: </b>{currentCountry.recoveredPerOneMillion}</span>\r\n                    <span><b>Number of tests: </b>{currentCountry.tests}</span>\r\n                    <span><b>Test per One Million: </b>{currentCountry.testsPerOneMillion}</span>\r\n                    <span><b>Taday Cases: </b>{currentCountry.todayCases}</span>\r\n                    <span><b>Today Deaths: </b>{currentCountry.todayDeaths}</span>\r\n                    <span><b>Today Recovered: </b>{currentCountry.todayRecovered}</span>\r\n                    <span>\r\n                        <b>Last Update: </b>\r\n                        {`${lastUpdate.getDate()}/${lastUpdate.getMonth() + 1}/${lastUpdate.getFullYear()} ${lastUpdate.getHours()}:${lastUpdate.getMinutes()}`}\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nexport default Modal;","import Modal from \"./Modal\";\r\nexport default Modal;","import * as React from \"react\";\r\nimport Modal from 'components/Modal';\r\nimport \"./Displayer.scss\";\r\n\r\nconst ns = \"displayer\";\r\n\r\nclass Displayer extends React.Component {\r\n    intervalApi;\r\n\r\n    state = {\r\n        displayModal: false,\r\n        currentCountry: null\r\n    }\r\n\r\n    setModal = newState => {\r\n        this.setState({\r\n            displayModal: newState\r\n        });\r\n    }\r\n\r\n    setCurentCountry = (newCountry) => {\r\n        this.setState({\r\n            currentCountry: newCountry\r\n        });\r\n    }\r\n    getCurrentCountry = () => {\r\n        return this.state.currentCountry;\r\n    }\r\n\r\n    componentDidMount() {\r\n        const {getCovidData} = this.props;\r\n        this.intervalApi = window.setInterval(() => {\r\n            getCovidData();\r\n        }, 5 * 60 * 1000);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.clearInterval(this.intervalApi);\r\n    }\r\n\r\n    render() {\r\n        const {countries} = this.props;\r\n        return (\r\n            <React.Fragment>\r\n                {this.state.displayModal && (\r\n                    <Modal\r\n                        closeModalFn={this.setModal}\r\n                        getCountryFn={this.getCurrentCountry}\r\n                    />\r\n                )\r\n                }\r\n                <div className={`${ns}`}>\r\n                    {countries.map(\r\n                        country =>\r\n                            <div\r\n                                className={`${ns}__country-wrapper`}\r\n                                onClick={\r\n                                    () => {\r\n                                        console.log(\"click\");\r\n                                        this.setModal(true);\r\n                                        this.setCurentCountry(country);\r\n                                    }\r\n                                }\r\n                            >\r\n                                <div className={`${ns}__country-content`}>\r\n                                    <div className={`${ns}__country-content--header`}>\r\n                                        <img src={country.countryInfo.flag}/>\r\n                                        {country.country}\r\n                                    </div>\r\n                                    <div className={`${ns}__country-content--data`}>\r\n                                        <span><b>Confirmed: </b>{`${country.cases}`}</span>\r\n                                        <span><b>Actives: </b>{` ${country.active}`}</span>\r\n                                        <span><b>Recovered: </b>{` ${country.recovered}`}</span>\r\n                                        <span><b>Deaths: </b>{` ${country.deaths}`}</span>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                    )}\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Displayer;","import DisplayerContainer from \"./DisplayerContainer\";\r\nexport default DisplayerContainer;","import {connect} from 'react-redux';\r\nimport {compose, bindActionCreators} from 'redux';\r\nimport {getCountriesSelector} from 'store/selectors/covidStatsSelector';\r\nimport {getCovidData} from 'store/actions/liveStatsAction';\r\nimport Displayer from \"./Displayer\";\r\n\r\nconst mapStateToProps = (state) => (\r\n    {\r\n        countries: getCountriesSelector(state)\r\n    }\r\n);\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return bindActionCreators(\r\n        {\r\n            getCovidData\r\n        },\r\n        dispatch\r\n    );\r\n};\r\n\r\nexport default compose(\r\n    connect(\r\n        mapStateToProps,\r\n        mapDispatchToProps\r\n    )\r\n)(Displayer);\r\n","import React from 'react';\nimport Displayer from \"components/Displayer\";\n\nclass App extends React.Component {\n    render() {\n        return (\n            <Displayer/>\n        );\n    }\n}\n\nexport default App;\n","const liveStatsReducer = (state = {countries: []}, action) => {\r\n    switch (action.type) {\r\n        case \"SET_COVID_STATS_DATA\":\r\n            return {...state, countries: action.payload.countries};\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default liveStatsReducer;","import {combineReducers} from \"redux\";\r\nimport liveStatsReducer from \"./liveStats\";\r\n\r\nconst rootReducer = combineReducers({\r\n   liveStats: liveStatsReducer\r\n});\r\n\r\nexport default rootReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n\nimport {createStore, applyMiddleware, compose} from \"redux\";\nimport thunk from \"redux-thunk\";\nimport {Provider} from 'react-redux';\nimport rootReducer from \"store/reducers\";\nimport {getCovidData} from 'store/actions/liveStatsAction';\n\nconst store = createStore(\n    rootReducer,\n    {},\n    compose(\n        applyMiddleware(thunk),\n        window.devToolsExtension ? window.devToolsExtension() : f => f\n    )\n);\nstore.dispatch(getCovidData());\n\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}